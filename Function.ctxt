#BlueJ class context
comment0.target=Function
comment0.text=\n\ The\ Function\ is\ the\ most\ important\ part\ of\ the\ "model"\ in\ our\ function\ plotter\ application.\n\ The\ "model"\ does\ not\ know\ anything\ about\ the\ "GUI".\n\ It\ could\ exist\ without\ "GUI"\ (e.g.,\ for\ a\ command-line\ interface).\n
comment1.params=expressionText
comment1.target=Function(java.lang.String)
comment2.params=expressionText
comment2.target=void\ setExpression(java.lang.String)
comment2.text=\n\ A\ method\ that\ modifies\ the\ expression\ being\ computed\ by\ the\ function\n\ compiles\ the\ program\ for\ the\ function,\ for\ its\ derivative\ and\ \n\ optimizes\ both.\n\ @param\ String\ The\ new\ expression\ that\ needs\ to\ be\ assigned\ to\ the\ function\n
comment3.params=
comment3.target=java.lang.String\ getExpression()
comment3.text=\n\ Returns\ the\ expression\ currently\ stored\ in\ the\ function\n\ @return\ String\ The\ current\ expression\ of\ the\ function\n
comment4.params=
comment4.target=java.lang.String\ getDerivativeExpr()
comment4.text=\n\ Returns\ the\ expression\ currently\ stored\ in\ the\ function\n\ @return\ String\ The\ current\ expression\ of\ the\ function\n
comment5.params=argument
comment5.target=double\ compute(double)
comment5.text=\n\ A\ method\ that\ takes\ an\ argument\ "x"\ and\ return\ the\ corresponding\ "y"\n\ of\ the\ model.\n\ @param\ argument\ A\ double\ which\ represents\ the\ input\ of\ the\n\ function\n\ @return\ A\ double\ which\ represents\ the\ output\ of\ the\ function\ \n\ being\ computed\ \n
comment6.params=argument
comment6.target=double\ computeDX(double)
comment6.text=\n\ A\ method\ that\ takes\ an\ argument\ "x"\ and\ return\ the\ corresponding\ "y"\n\ of\ the\ derivative\ of\ the\ computed\ function.\n\ @param\ argument\ A\ double\ which\ represent\ the\ input\ of\ the\ function\n\ @return\ A\ double\ which\ represents\ the\ output\ of\ the\ computed\ derivative\n
comment7.params=li
comment7.target=void\ addFunctionListener(FunctionListener)
comment7.text=\n\ A\ method\ that\ adds\ a\ FunctionListener\ to\ the\ array\ of\ active\ listeners\n\ @param\ li\ The\ FunctionListener\ to\ be\ added\n
comment8.params=li
comment8.target=void\ removeFunctionListener(FunctionListener)
comment8.text=\n\ A\ method\ that\ remove\ a\ FunctionListener\ from\ the\ array\ of\ active\ listeners\n\ @param\ li\ The\ FunctionListener\ to\ be\ removed\n
comment9.params=
comment9.target=void\ fireFunctionChanged()
comment9.text=\n\ A\ method\ to\ fire\ the\ functionChanged\ method\ on\ all\ active\ listeners\n
numComments=10
